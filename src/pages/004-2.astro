---
import Layout from '../layouts/Layout.astro';
---

<Layout title="004">
	<div id="webgl">

	</div>

</Layout>

<style>
	#webgl{
		position: fixed;
		top: 0;
		left: 0;
	}

	.contents{
		position: fixed;
		z-index: 100;
		bottom: 0;
		right: 0;
	}
</style>

<script>
	import * as THREE from 'three';
	import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
	import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
	import { gsap } from "gsap";

	// DOM がパースされたことを検出するイベントを設定
	window.addEventListener('DOMContentLoaded', () => {
		// 制御クラスのインスタンスを生成
		const app = new App3();

		Promise.all([app.loadTexture()]).
		then(() => {
			// 初期化
			app.init();
			// 描画
			app.render();
		})
	}, false);

	/**
	 * three.js を効率よく扱うために自家製の制御クラスを定義
	 */
	class App3 {
		/**
		 * カメラで撮影する範囲を表す定数 @@@
		 */
		static get CAMERA_SCALE() {return 5.0;} // ※1 (0, 0)から上下にこの値をとる
		/**
		 * カメラ定義のための定数 @@@
		 */
		static get CAMERA_PARAM() {
			// 平行投影（正射影）変換用のパラメータを計算する
			const aspect = window.innerWidth / window.innerHeight; // アスペクト比
			const scale = App3.CAMERA_SCALE;                       // 切り取る空間の広さ（スケール）
			const horizontal = scale * aspect;                     // 横方向のスケール ※1 (0, 0)から上下にこの値をとる positionやscaleが画面に写る最大値
			const vertiacal = scale;                               // 縦方向のスケール ※1 (0, 0)から上下にこの値をとる positionやscaleが画面に写る最大値
			return {
				left: -horizontal,  // 切り取る空間の左端までの距離
				right: horizontal,  // 切り取る空間の右端までの距離
				top: vertiacal,     // 切り取る空間の上端までの距離
				bottom: -vertiacal, // 切り取る空間の下端までの距離
				near: 0.1,
				far: 50.0,
				x: 0.0, // 正面
				y: 0.0, // 正面
				z: 5.0,
				lookAt: new THREE.Vector3(0.0, 0.0, 0.0),
			};
		}
		/**
		 * レンダラー定義のための定数
		 */
		static get RENDERER_PARAM() {
			return {
				// レンダラーが背景をリセットする際に使われる背景色
				clearColor: 0x000000,
				// レンダラーが描画する領域の横幅
				width: window.innerWidth,
				// レンダラーが描画する領域の縦幅
				height: window.innerHeight,
			};
		}
		/**
		 * ディレクショナルライト定義のための定数
		 */
		static get DIRECTIONAL_LIGHT_PARAM() {
			return {
				color: 0xffffff, // 光の色
				intensity: 1.0,  // 光の強度
				x: 1.0,          // 光の向きを表すベクトルの X 要素
				y: 1.0,          // 光の向きを表すベクトルの Y 要素
				z: 1.0           // 光の向きを表すベクトルの Z 要素
			};
		}
		/**
		 * アンビエントライト定義のための定数
		 */
		static get AMBIENT_LIGHT_PARAM() {
			return {
				color: 0xffffff, // 光の色
				intensity: 0.5,  // 光の強度
			};
		}
		/**
		 * マテリアル定義のための定数
		 */
		static get MATERIAL_PARAM() {
			return {
				color: 0x000000, // マテリアルの基本色
				side: THREE.DoubleSide, // THREE.FrontSide THREE.BackSide THREE.DoubleSide
			};
		}

		renderer: any;
		scene: any;
		camera: any;
		directionalLight: any;
		ambientLight: any;
		material: any;
		controls: any;
		axesHelper: any;

		isClick: any;
		time: any;

		raycaster: any;
		plane: any;
		planeGroup: any;
		planeArray: any;
		backupScale: any;
		texture: any;
		widthInit: any;
		heightInit: any;
		planeAspectY: any;

		/**
		 * コンストラクタ
		 * @constructor
		 */
		constructor() {
			this.renderer;         // レンダラ
			this.scene;            // シーン
			this.camera;           // カメラ
			this.directionalLight; // ディレクショナルライト
			this.ambientLight;     // アンビエントライト
			this.material;         // マテリアル
			this.controls;         // オービットコントロール
			this.axesHelper;       // 軸ヘルパー

			this.isClick = false; // キーの押下状態を保持するフラグ
			this.time; //経過時間

			this.plane;
			this.planeGroup;
			this.planeArray;
			this.backupScale;
			this.texture;
			this.widthInit;
			this.heightInit;
			this.planeAspectY;
			this.raycaster

			// Raycaster のインスタンスを生成する @@@
			this.raycaster = new THREE.Raycaster();
			console.log(this.raycaster)
			// マウスのクリックイベントの定義 @@@
			window.addEventListener('click', (mouseEvent) => {
				// スクリーン空間の座標系をレイキャスター用に正規化する（-1.0 ~ 1.0 の範囲）
				const x = mouseEvent.clientX / window.innerWidth * 2.0 - 1.0;
				const y = mouseEvent.clientY / window.innerHeight * 2.0 - 1.0;
				// スクリーン空間は上下が反転している点に注意（Y だけ符号を反転させる）
				const v = new THREE.Vector2(x, -y);
				// レイキャスターに正規化済みマウス座標とカメラを指定する
				this.raycaster.setFromCamera(v, this.camera);
				// scene に含まれるすべてのオブジェクトを対象にレイキャストする
				// intersectObjects（配列 Array）
				const intersects = this.raycaster.intersectObjects(this.planeArray);

				// - intersectObjects でレイキャストした結果は配列 ----------------------
				// 名前が似ているので紛らわしいのですが Raycaster には intersectObject と
				// intersectObjects があります。複数形の s がついているかどうかの違いがあ
				// り、複数形の場合は引数と戻り値のいずれも配列になります。
				// この配列の長さが 0 である場合はカーソル位置に向かって放ったレイは、どの
				// オブジェクトとも交差しなかったと判断できます。また、複数のオブジェクト
				// とレイが交差した場合も、three.js 側で並び替えてくれるので 0 番目の要素
				// を参照すれば必ず見た目上の最も手前にあるオブジェクトを参照できます。
				// 戻り値の中身は object というプロパティを経由することで対象の Mesh など
				// のオブジェクトを参照できる他、交点の座標などもわかります。
				// ----------------------------------------------------------------------
				if (intersects.length > 0) {
					// カメラに近いものからキャストされて配列に格納されるので、配列の0番だけを変えることで、重なってても1個だけマテリアルを変更できてる。
					console.log('hit');
					console.log(intersects[0].object.position.x);

					// positon変更
					gsap.to(intersects[0].object.position, {
						ease: "power3.Out",
						delay: 0.4,
						x: 0,
						y: 0,
						z: 1, 
					});

					this.backupScale = intersects[0].object.scale;

					//scale変更
					gsap.to(intersects[0].object.scale, {
						ease: "power3.Out",
						delay: 0.4,
						x: 4,
						y: 4, 
					});
				}


				// - Raycaster は CPU 上で動作する --------------------------------------
				// WebGL は描画処理に GPU を活用することで高速に動作します。
				// しかし JavaScript は CPU 上で動作するプログラムであり、Raycaster が内部
				// で行っている処理はあくまでも CPU 上で行われます。
				// 原理的には「メッシュを構成するポリゴンとレイが衝突するか」を JavaScript
				// でループして判定していますので、シーン内のメッシュの量やポリゴンの量が
				// 増えると、それに比例して Raycaster のコストも増加します。
				// ----------------------------------------------------------------------
			}, false);

			// 再帰呼び出しのための this 固定
			this.render = this.render.bind(this);

			// リサイズイベント
			window.addEventListener('resize', () => {
				// scaleをレスポンシブする処理
				this.planeGroup.scale.x = this.planeGroup.scale.x * (window.innerWidth / this.widthInit);
				// y軸が勝手にあってしまうのは聞く。
				/* this.planeGroup.scale.y = this.planeGroup.scale.y * (window.innerHeight / this.heightInit); */ //yはwindouサイズで決めた方が、幅に応じてレスポンスするはず。
				// 現在のウィンドウサイズ（横幅）を更新
				this.widthInit = window.innerWidth;
				/* this.heightInit = window.innerHeight; */

				// カメラの更新
				this.renderer.setSize(window.innerWidth, window.innerHeight);
				// OrthographicCamera 用のパラメータを求める
				const aspect = window.innerWidth / window.innerHeight;
				const scale = App3.CAMERA_SCALE;
				const horizontal = scale * aspect;
				const vertiacal = scale;
				this.camera.left = -horizontal;
				this.camera.right = horizontal;
				this.camera.top = vertiacal;
				this.camera.bottom = -vertiacal;
				
				this.camera.updateProjectionMatrix();
			}, false);
		}

		// texture load
		loadTexture() {
			return new Promise((resolve) => {
				let url;

				if(location.hostname == '127.0.0.1') {
					url = '../../public/world_map.jpg';
				} else {
					url = '../world_map.jpg';
				}

				const loader = new THREE.TextureLoader();

				loader.load(url, (texture) => {
					this.texture = texture;

					// Promise を解決
					resolve();
				});
			});
		}


		/**
		 * 初期化処理
		 */
		init() {
			// レンダラー
			this.renderer = new THREE.WebGLRenderer();
			this.renderer.setClearColor(new THREE.Color(App3.RENDERER_PARAM.clearColor));
			this.renderer.setPixelRatio(window.devicePixelRatio);
			/* this.renderer.outputEncoding = THREE.GammaEncoding; */
			this.renderer.setSize(App3.RENDERER_PARAM.width, App3.RENDERER_PARAM.height);
			const wrapper = document.querySelector('#webgl');
			wrapper.appendChild(this.renderer.domElement);

			// シーン
			this.scene = new THREE.Scene();

			// カメラ
			this.camera = new THREE.OrthographicCamera(
        App3.CAMERA_PARAM.left,
        App3.CAMERA_PARAM.right,
        App3.CAMERA_PARAM.top,
        App3.CAMERA_PARAM.bottom,
        App3.CAMERA_PARAM.near,
        App3.CAMERA_PARAM.far
    );
			this.camera.position.set(
				App3.CAMERA_PARAM.x,
				App3.CAMERA_PARAM.y,
				App3.CAMERA_PARAM.z,
			);
			this.camera.lookAt(App3.CAMERA_PARAM.lookAt);

			// ディレクショナルライト（平行光源）
			this.directionalLight = new THREE.DirectionalLight(
				App3.DIRECTIONAL_LIGHT_PARAM.color,
				App3.DIRECTIONAL_LIGHT_PARAM.intensity
			);
			this.directionalLight.position.set(
				App3.DIRECTIONAL_LIGHT_PARAM.x,
				App3.DIRECTIONAL_LIGHT_PARAM.y,
				App3.DIRECTIONAL_LIGHT_PARAM.z,
			);
			this.scene.add(this.directionalLight);

			// アンビエントライト（環境光）
			this.ambientLight = new THREE.AmbientLight(
				App3.AMBIENT_LIGHT_PARAM.color,
				App3.AMBIENT_LIGHT_PARAM.intensity,
			);
			this.scene.add(this.ambientLight);

			// マテリアル
			this.material = new THREE.MeshStandardMaterial(App3.MATERIAL_PARAM);

			// コントロール
			this.controls = new OrbitControls(this.camera, this.renderer.domElement);

			// タイマー
			this.time = new THREE.Clock();

			// ヘルパー
			const axesBarLength = 5.0;
			this.axesHelper = new THREE.AxesHelper(axesBarLength);
			this.scene.add(this.axesHelper);

			// 処理
			// 画像数
			const count = 16;
			// 列数
			const column = 4;
			// 行数
			const line = count / column;
			// 配列を定義
			this.planeArray = [];
			// グループを定義
			this.planeGroup = new THREE.Group();
			// 現在のウィンドウサイズを保存
			this.widthInit = window.innerWidth;
			this.heightInit = window.innerHeight;
			// 横幅の大きさ
			const planeWidth = (App3.CAMERA_SCALE * (window.innerWidth / window.innerHeight)) * 2 / column;
			// 縦幅の大きさ
			const planeHeight = App3.CAMERA_SCALE * 2 / line;
			// ジオメトリの大きさ定義
			const planeGeometry = new THREE.PlaneGeometry(planeWidth, planeHeight);
			// マテリアルを定義
			const planeMaterial = new THREE.MeshBasicMaterial({map: this.texture });
			/* const planeMaterial = new THREE.MeshBasicMaterial({color: '#000' }); */
			// グループにplaneを追加
			for(let a = 0; a < line; a++){
				for(let b = 0; b < column; b++){
					const plane = new THREE.Mesh(planeGeometry, planeMaterial);

					// planeの半分の大きさ + 行列を半分に分け、-1した時の倍率をplane一枚分の大きさ + 今のカラム分の大きさ
					plane.position.x = (-1 * (planeWidth / 2 + (planeWidth * (column / 2 - 1)))) + (planeWidth * (b));
					plane.position.y = ((planeHeight / 2) + (planeHeight * (line / 2 - 1))) - (planeHeight * a);
				
					// グループにplaneを追加
					this.planeGroup.add(plane);
					// 配列にplane情報を追加（ray判定用）
					this.planeArray.push(plane);
				}
			}

			// シーンにグループを追加
			this.scene.add(this.planeGroup);
			const aaa = (60 / 2) * (Math.PI / 180);
			const dist = 2000 / 2 / Math.tan(aaa);
			console.log(dist)
		}

		/**
		 * 描画処理
		 */
		render() {
			// 恒常ループの設定
			requestAnimationFrame(this.render);

			// コントロールを更新
			this.controls.update();


			// レンダラーで描画
			this.renderer.render(this.scene, this.camera);
		}
	}

</script>
