---
import Layout from '../layouts/Layout.astro';
---

<Layout title="003">
	<div id="webgl"></div>

	<div class="contents">
		<p>aaa</p>
	</div>
</Layout>

<style>
	#webgl{
		position: fixed;
		top: 0;
		left: 0;
	}

	.contents{
		position: fixed;
		z-index: 100;
		bottom: 0;
		right: 0;
	}
</style>

<script>
	import * as THREE from 'three';
	import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
	import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
	import { gsap } from "gsap";

	// DOM がパースされたことを検出するイベントを設定
	window.addEventListener('DOMContentLoaded', () => {
		// 制御クラスのインスタンスを生成
		const app = new App3();

		Promise.all([app.loadModelPaperAirplane(), app.loadTexture()]).
		then(() => {
			// 初期化
			app.init();
			// 描画
			app.render();
		})
	}, false);

	/**
	 * three.js を効率よく扱うために自家製の制御クラスを定義
	 */
	class App3 {
		/**
		 * カメラ定義のための定数
		 */
		static get CAMERA_PARAM() {
			return {
				// fovy は Field of View Y のことで、縦方向の視野角を意味する
				fovy: 60,
				// 描画する空間のアスペクト比（縦横比）
				aspect: window.innerWidth / window.innerHeight,
				// 描画する空間のニアクリップ面（最近面）
				near: 0.1,
				// 描画する空間のファークリップ面（最遠面）
				far: 20.0,
				// カメラの位置
				x: 0.0,
				y: 2.0,
				z: 10.0,
				// カメラの中止点
				lookAt: new THREE.Vector3(0.0, 0.0, 0.0),
			};
		}
		/**
		 * レンダラー定義のための定数
		 */
		static get RENDERER_PARAM() {
			return {
				// レンダラーが背景をリセットする際に使われる背景色
				clearColor: 0xffffff,
				// レンダラーが描画する領域の横幅
				width: window.innerWidth,
				// レンダラーが描画する領域の縦幅
				height: window.innerHeight,
			};
		}
		/**
		 * ディレクショナルライト定義のための定数
		 */
		static get DIRECTIONAL_LIGHT_PARAM() {
			return {
				color: 0xffffff, // 光の色
				intensity: 1.0,  // 光の強度
				x: 1.0,          // 光の向きを表すベクトルの X 要素
				y: 1.0,          // 光の向きを表すベクトルの Y 要素
				z: 1.0           // 光の向きを表すベクトルの Z 要素
			};
		}
		/**
		 * アンビエントライト定義のための定数
		 */
		static get AMBIENT_LIGHT_PARAM() {
			return {
				color: 0xffffff, // 光の色
				intensity: 0.5,  // 光の強度
			};
		}
		/**
		 * マテリアル定義のための定数
		 */
		static get MATERIAL_PARAM() {
			return {
				color: 0xffffff, // マテリアルの基本色
				side: THREE.DoubleSide, // THREE.FrontSide THREE.BackSide THREE.DoubleSide
			};
		}

		// 地球と紙ヒコーキの距離
		static get PAPERAIRPLANE_DISTANCE(){
			return 3.0;
		}
		// 紙ヒコーキのスピード
		static get PAPERAIRPLANE_SPEED(){
			return 0.05;
		}
		// イージング関数
		static easeInSine(x) {
  		return 1 - Math.cos((x * Math.PI) / 2);
		}
		static easeInOutQuint(x) {
			return x < 0.5 ? 16 * x * x * x * x * x : 1 - Math.pow(-2 * x + 2, 5) / 2;
		}

		renderer: any;
		scene: any;
		camera: any;
		directionalLight: any;
		ambientLight: any;
		material: any;

		paperAirplane: any;
		paperAirplaneGroup: any;
		world: any;
		worldMapTexture: any;
		pointA: any;
		pointB: any;
		frame: any;
		nowFrame: any;
		q: any;
		qGroup: any;
		axis: any;
		axisGroup: any;
		t: any;
		tGroup: any;
		theta: any;
		thetaGroup: any;
		before: any;
		beforeGroup: any;

		controls: any;
		axesHelper: any;

		isDown: any;
		time: any;

		/**
		 * コンストラクタ
		 * @constructor
		 */
		constructor() {
			this.renderer;         // レンダラ
			this.scene;            // シーン
			this.camera;           // カメラ
			this.directionalLight; // ディレクショナルライト
			this.ambientLight;     // アンビエントライト
			this.material;         // マテリアル

			this.paperAirplane;
			this.paperAirplaneGroup;
			this.world;
			this.worldMapTexture;
			this.pointA;
			this.pointB;
			this.frame;
			this.nowFrame;
			this.q;
			this.qGroup;
			this.axis;
			this.axisGroup;
			this.t;
			this.tGroup;
			this.theta;
			this.thetaGroup;
			this.before;
			this.beforeGroup;

			this.controls;         // オービットコントロール
			this.axesHelper;       // 軸ヘルパー

			this.isDown = false; // キーの押下状態を保持するフラグ
			this.time; //経過時間

			// 再帰呼び出しのための this 固定
			this.render = this.render.bind(this);

			// キーの押下や離す操作を検出できるようにする
			/* window.addEventListener('keydown', (keyEvent) => {
				switch (keyEvent.key) {
					case ' ':
						this.isDown = true;
						console.log('keydown')
						break;
					default:
				}
			}, false);
			window.addEventListener('keyup', (keyEvent) => {
				this.isDown = false;
			}, false); */

			// リサイズイベント
			window.addEventListener('resize', () => {
				this.renderer.setSize(window.innerWidth, window.innerHeight);
				this.camera.aspect = window.innerWidth / window.innerHeight;
				this.camera.updateProjectionMatrix();
			}, false);
		}

		// texture load
		loadTexture() {
			return new Promise((resolve) => {
				let url;

				if(location.hostname == '127.0.0.1') {
					url = '../../public/world_map.jpg';
				} else {
					url = '../world_map.jpg';
				}

				const loader = new THREE.TextureLoader();

				loader.load(url, (texture) => {
					this.worldMapTexture = texture;

					// Promise を解決
					resolve();
				});
			});
		}

		// glb load
		loadModelPaperAirplane() {
			return new Promise((resolve) => {
				let url;

				if(location.hostname == '127.0.0.1') {
					url = '../../public/paper_airplane.glb';
				} else {
					url = '../paper_airplane.glb';
				}

				const loader = new GLTFLoader();

				loader.load(url, (glb) => {
					this.paperAirplane = glb.scene;

					// Promise を解決
					resolve();
				});
			});
		}

		/**
		 * 初期化処理
		 */
		init() {
			// レンダラー
			this.renderer = new THREE.WebGLRenderer();
			this.renderer.setClearColor(new THREE.Color(App3.RENDERER_PARAM.clearColor));
			this.renderer.setPixelRatio(window.devicePixelRatio);
			/* this.renderer.outputEncoding = THREE.GammaEncoding; */
			this.renderer.setSize(App3.RENDERER_PARAM.width, App3.RENDERER_PARAM.height);
			const wrapper = document.querySelector('#webgl');
			wrapper.appendChild(this.renderer.domElement);

			// シーン
			this.scene = new THREE.Scene();
			/* this.scene.environment = this.hdr;  */

			// カメラ
			this.camera = new THREE.PerspectiveCamera(
				App3.CAMERA_PARAM.fovy,
				App3.CAMERA_PARAM.aspect,
				App3.CAMERA_PARAM.near,
				App3.CAMERA_PARAM.far,
			);
			this.camera.position.set(
				App3.CAMERA_PARAM.x,
				App3.CAMERA_PARAM.y,
				App3.CAMERA_PARAM.z,
			);
			this.camera.lookAt(App3.CAMERA_PARAM.lookAt);

			// ディレクショナルライト（平行光源）
			this.directionalLight = new THREE.DirectionalLight(
				App3.DIRECTIONAL_LIGHT_PARAM.color,
				App3.DIRECTIONAL_LIGHT_PARAM.intensity
			);
			this.directionalLight.position.set(
				App3.DIRECTIONAL_LIGHT_PARAM.x,
				App3.DIRECTIONAL_LIGHT_PARAM.y,
				App3.DIRECTIONAL_LIGHT_PARAM.z,
			);
			this.scene.add(this.directionalLight);

			// アンビエントライト（環境光）
			this.ambientLight = new THREE.AmbientLight(
				App3.AMBIENT_LIGHT_PARAM.color,
				App3.AMBIENT_LIGHT_PARAM.intensity,
			);
			this.scene.add(this.ambientLight);

			// マテリアル
			this.material = new THREE.MeshStandardMaterial(App3.MATERIAL_PARAM);

			// 座標
			this.pointA = new THREE.Vector3(0, 1.5, 1.5);
			/* this.pointB = new THREE.Vector3(-3, 0, 0); */

			// 地球
			let worldMaterial = new THREE.MeshStandardMaterial(App3.MATERIAL_PARAM);
			worldMaterial.map = this.worldMapTexture;
			this.world = new THREE.Mesh(new THREE.SphereGeometry(3, 32, 32), worldMaterial);
			/* this.scene.add(this.world); */

			// モデル
			this.paperAirplaneGroup = new THREE.Group();
			this.paperAirplane.position.set(0, 3, 0);
			this.paperAirplane.scale.set(0.25, 0.25, 0.25);
			this.paperAirplaneGroup.add(this.paperAirplane);
			this.scene.add(this.paperAirplaneGroup);

			// コントロール
			this.controls = new OrbitControls(this.camera, this.renderer.domElement);

			//タイマー
			this.time = new THREE.Clock();

			// ヘルパー
			const axesBarLength = 5.0;
			this.axesHelper = new THREE.AxesHelper(axesBarLength);
			this.scene.add(this.axesHelper);

			// 事前処理
			this.frame = 100;
			this.nowFrame = 0;
			this.before = 0;
			this.beforeGroup = 0;
			// ワールド原点座標
			const vec0 = new THREE.Vector3(0.0, 0.0, 0.0);
			// 初期のモデルの向きのベクトル
			const vec3 = new THREE.Vector3(0.0, 0.0, 1.0).normalize();

			window.addEventListener('keydown', (keyEvent) => {
				switch (keyEvent.key) {
					case ' ':
						this.isDown = true;

						/* const translateGeoCoords = (latitude, longitude, radius) => {
							// 仰角
							const phi = latitude * Math.PI / 180;
							// 方位角
							const theta = (longitude - 180) * Math.PI / 180;

							const x = -1 * radius * Math.cos(phi) * Math.cos(theta);
							const y = radius * Math.sin(phi);
							const z = radius * Math.cos(phi) * Math.sin(theta);

							return new THREE.Vector3(x, y, z);
						};

						this.pointB = translateGeoCoords(10, 270, 3); */

						/* グループの制御 */
						// 紙ヒコーキのベクトル
						const vec1 = new THREE.Vector3().subVectors(new THREE.Vector3(this.paperAirplane.position.x, this.paperAirplane.position.y, this.paperAirplane.position.z), vec0);
						// 目的座標のベクトル
						const vec2 = new THREE.Vector3().subVectors(this.pointA, vec0); //ここを変更してチェックしてます。
						// 2つのベクトルの直交ベクトルを求める
						this.axisGroup = new THREE.Vector3().crossVectors(vec1, vec2);
						// 単位化
						this.axisGroup.normalize();
						// 内積でコサインを算出
						const cosGroup = vec2.dot(vec1);
						//　コサインをラジアンに変換（総回転量）
						const radGroup = Math.acos(cosGroup);
						// ラジアン → 度 に変換
						this.thetaGroup = radGroup * 180 / Math.PI;
						// 1フレームの回転量を算出
						this.tGroup = this.thetaGroup / this.frame;


						/* 紙ヒコーキの制御*/
						// グループを回転させる直交ベクトルとワールド原点から紙ヒコーキまでのベクトルとで直交ベクトルを求める（回転方向のベクトルを求める）
						const vec4 = new THREE.Vector3().crossVectors(this.axisGroup, vec1);
						// 単位化
						vec4.normalize();
						// 現在のモデルの向きベクトルと回転方向のベクトルとで直交ベクトルを求める
						this.axis = new THREE.Vector3().crossVectors(vec3, vec4);
						// 単位化
						this.axis.normalize();
						// 内積でコサインを算出
						const cos = vec4.dot(vec3);
						//　コサインをラジアンに変換
						const rad = Math.acos(cos);
						// 今回動かしたい分の（差分の）クォータニオンを算出
						this.q = new THREE.Quaternion().setFromAxisAngle(this.axis, rad);
						// 現在のクォータニオンにかけて動かす（クォータニオンはかけると加算される）
						this.paperAirplane.quaternion.premultiply(this.q);


						break;
					default:
				}
			}, false);
		}

		/**
		 * 描画処理
		 */
		render() {
			// 恒常ループの設定
			requestAnimationFrame(this.render);

			// コントロールを更新
			this.controls.update();


			if(this.nowFrame <= 100 && this.isDown){
				console.log('ok')
				// 現在のフレームに対して、0.0 ~ 1.0まででどれくらい割合を持っているか算出
				const ratioGroup = (this.tGroup * this.nowFrame) / this.thetaGroup;
				// イージングをつける
				const eGroup = App3.easeInOutQuint(ratioGroup);
				// イージングをつけた割合を総回転量にかけて、現在フレームまでのイージングがかかった成分を算出
				const easeInSineThetaGroup = eGroup * this.thetaGroup;
				// 今回の結果から前回の結果を引いて、1フレームで動かしたい分の度数を算出
				const differenceGroup = easeInSineThetaGroup - this.beforeGroup;
				// 次回の計算用に今回の結果を保存（差分でなくトータル） 
				this.beforeGroup = easeInSineThetaGroup;
				// 度数 → ラジアン に変換
				const radGroup = differenceGroup * Math.PI / 180;
				// 今回動かしたい分の（差分の）クォータニオンを算出
				this.qGroup = new THREE.Quaternion().setFromAxisAngle(this.axisGroup, radGroup);
				// 現在のクォータニオンにかけて動かす（クォータニオンはかけると加算される）
				this.paperAirplaneGroup.quaternion.premultiply(this.qGroup);
				// 現在のフレームを加算
				this.nowFrame += 1;
			}

			// レンダラーで描画
			this.renderer.render(this.scene, this.camera);
		}
	}

</script>
